/**
 * How to use it:
 * be in creative, with a wooden sword and left click a diamond chest. I only tested it with that one. That's what my pack uses. Don't @ me about it.
 * The recipe has to be laid out like this in the chest
 * This requies a 12 x 4 (at the minimum) chest. Any other size will NOT work.
 *  
 * "xxx""xxx""xxx""xxx"
 * "xxx""xxx""xxx""xxx"
 * "xxx""xxx""xxx""xxx"
 * "yz0""yz0""yz0""yz0"
 * 
 * x = any input item (incl nbt)
 * y = if there's an item in that spot the recipe is shapeless else it's shaped
 * 0 = nothing youc an ignore this slot.
 * 
 * you'll get 4 outputs in your chat, top to bottom = left to right in the chest.
 * If you have questions ask on my discord: https://mc.exitian.ch/discord or on my website top left corner https://exitian.ch
 * 
 * This thing also breaks at times and spits out 8 instead of 4 lines.. just read the code if you need help.
 */

/**
 * @constant MODID the recipe string
 */
const MODID = "laniakeaex"

/**
 * @constant ALPHABET an alphabet used for the <K, V> pairs and the matrix
 */
const ALPHABET = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"]

/**
 * @constant RECIPE_SET Just a look-up table as it was easier to implement with offsets
 */
const RECIPE_SET = [0, 1, 2, 12, 13, 14, 24, 25, 26, 36, 37]

/**
 * @constant DEF_COLOR (HEX) the default text color.
 */
const DEF_COLOR = 0xafafaf

/**
 * @constant ACC_COLOR (HEX) any accent colour, it really doesn't matter.
 */
const ACC_COLOR = 0xff9ec1

/**
 * @constant ALL_REC_COL (HEX) the color of the "All recipe copy" chat text.
 */
const ALL_REC_COL = 0x00FF80

/**
 * @constant TAG_ITEM an item ID used for specifying which item is used for tagging.
 */
const TAG_ITEM = "kubejs:tag_paper"


let fireonce = true;
let L = 0;
let useRandom = false;


onEvent("block.left_click", event => {

    let itemArray = [];
    let invObj = event.block.getInventory("down")
    let invSize;
    if (invObj != null || invObj != undefined) {
        invSize = invObj.size;
    }


    // this script breaks sometimes, if shit breaks (ergo it sends the output 8 instead of 4 times) set the enabler to true. You can blame Mojang for this one.
	

	var enabler;
    enabler = false
    if (fireonce && enabler) {
        fireonce = false
    } else {
        fireonce = true
    }

    if ((event.player.isCreativeMode) && (invObj != null || invObj != undefined) && (event.player.mainHandItem == "minecraft:wooden_sword") && fireonce) {
		var allColor;
        if (useRandom) {
            allColor = Math.random() * (0x7fffffff)
        } else {
            allColor = ALL_REC_COL
        }
        event.player.tell(Text.of(`[| -  NEW RECIPES ${L++}  - |]`).color(allColor))
        console.log("The recipes are in the chat not in the console.. go away..")
        let allRecipes = []
        let allRecipesComb = ""
		var outputArray;
		var isShapeless;
		var outputItem;
		var itemMap;
		var itemMatrix;
		var itemLegendArray;
		var legendSize;
        for (let k = 0; k < 4; k++) {


            outputArray = getIngredients(invObj, invSize, k)

            itemArray = outputArray[0]
            isShapeless = outputArray[1]
            outputItem = outputArray[2]

            itemMap = genItemMap(itemArray)
            itemMatrix = genItemMatrix(itemMap, itemArray)
            itemLegendArray = recipeLegend(itemMap)

            let itemLegend = ""
            legendSize = itemLegendArray.length

            for (let i = 0; i < legendSize; i++) {
                if (legendSize == 1) {
                    itemLegend + itemLegendArray[i]
                } else {
                    if (i == 0) {
                        itemLegend += (itemLegendArray[i] + ",\n")
                    }
                    else if (i > 0) {
                        if (i != legendSize - 1) {
                            itemLegend += (itemLegendArray[i] + ",\n")
                        } else {
                            itemLegend += (itemLegendArray[i] + "")
                        }
                    }
                }
            }

            q = k + 1

            if (!isShapeless) {

                typeString = `Shapeless with output of [${outputItem.count}x ${outputItem.id}]`
                itemArray.sort()
                let newItemArray = [];
                for (let i = 0; i < 9; i++) {
                    if (itemArray[i] != "Item.empty") {
                        newItemArray.push(itemArray[i])
                    }
                }
                copytext = genShapelessRecipeString(newItemArray, outputItem)
                chatRecipe(event, typeString, copytext, q)
                allRecipes.push(copytext)
            } else if (isShapeless) {
                typeString = `Shaped with output of [${outputItem.count}x ${outputItem.id}]`
                copytext = genShapedRecipeString(itemMatrix, itemLegend, outputItem)
                chatRecipe(event, typeString, copytext, q)
                allRecipes.push(copytext)
            }
        }

        for (let i = 0; i < 4; i++) {
            allRecipesComb += `// [| Generated Recipe |] //\n${allRecipes[i]}.id("replaceme")\n\n`
        }
        allChatRecipe(event, "Check them individually above.", allRecipesComb)
    }
})


/**
 * Get the key for a value in the map
 * @param {Map} map The map to search in
 * @param {String} searchValue The value to search for
 * @returns the key of the map
 */
function getKeyByValue(map, searchValue) {
    for (let [key, value] of map.entries()) {
        if (value === searchValue)
            return key;
    }
}

/**
 * 
 * @param {String} event pass the event
 * @param {String} hoverText what type of recipe
 * @param {String} copytext the text that's copied
 * @param {Number} accColor accent color (optional)
 * @param {Number} defColor default text color (optional)
 */
function chatRecipe(event, hoverText, copytext, miscText, accColor, defColor) {

    if (accColor == undefined || accColor == null) {
        accColor = ACC_COLOR
    }

    if (defColor == undefined || defColor == null) {
        defColor = DEF_COLOR
    }

    event.player.tell([
        Text.of("Click ").color(defColor),
        Text.of(`[|-Index ${miscText}-|]`).color(accColor).click("copy:" + copytext).hover(hoverText),
        Text.of(" to copy the recipe!").color(defColor)
    ])
}


/**
 * 
 * @param {String} event pass the event
 * @param {String} copytext the text that's copied
 * @param {Number} accColor accent color (optional)
 * @param {Number} defColor default text color (optional)
 */
function allChatRecipe(event, hoverText, copytext, accColor, defColor) {

    if (accColor == undefined || accColor == null) {
        accColor = ACC_COLOR
    }

    if (defColor == undefined || defColor == null) {
        defColor = DEF_COLOR
    }

    event.player.tell([
        Text.of("Click ").color(defColor),
        Text.of(`[|-ALL RECIPES-|]`).color(accColor).click("copy:" + copytext).hover(hoverText),
        Text.of(" to copy all recipes!").color(defColor)
    ])
}


/** 
 * Returns an array for a recipe 
 * @param {object} inputInventory The inventory object
 * @param {number} inputInventorySize Inventory size
 * @param {number} [recipeOffset=0] Recipe offset
 * @param {boolean} [ignoreLastRows=true] If it should ignore the last 2 rows of the chest. 
 * @returns {String[]} Returns the array of ingredients and the recipe output.
 */
function getIngredients(inputInventory, inputInventorySize, recipeOffset, ignoreLastRows) {
    let itemArray = [];
    let offsetMp = 3
    let totalOffset = offsetMp * recipeOffset
    let recipeSet = [];
    let recipeTypeItem, outCount, outputItem, bool
	var setItem;
	var item;

    for (let i = 0; i < RECIPE_SET.length; i++) {
        setItem = RECIPE_SET[i]
        setItem += totalOffset
        recipeSet.push(setItem)
    }

    if (recipeOffset == undefined || recipeOffset == null) {
        recipeOffset = 0
    }

    if (ignoreLastRows == undefined || ignoreLastRows == null) {
        ignoreLastRows = true
    }

    inputInventorySize = (ignoreLastRows ? (inputInventorySize) : (inputInventorySize - 24))

    for (let i = 0; i < inputInventorySize; i++) {
        if (recipeSet.includes(i)) {
            switch (i) {
                default:
                    item = inputInventory.get(i)
                    if (item.id == TAG_ITEM) {
                        itemArray.push("'#" + item.name + "'")
                    } else {
                        itemArray.push(item + "")
                    }
                    break;
                case (36 + totalOffset):
                    recipeTypeItem = inputInventory.get(i) + ""
                    break;
                case (37 + totalOffset):
                    outputItem = inputInventory.get(i)
                    break;
            }
        }
    }

    if (recipeTypeItem != "Item.empty" || recipeTypeItem == null || recipeTypeItem == undefined) {
        bool = false
    } else {
        bool = true
    }

    return [itemArray, bool, outputItem]
}


/**
 * Generates a map for recipes
 * @param {String[]} inputArray Array of ingredients
 * @returns a <k, v> map where key = letter, value = item
 */
function genItemMap(inputArray) {
    let itemMap = new Map();
    let alphaOffset = 0;
	var crrItem;
	var innerCrrItem;
	var key;

    for (let i = 0; i < inputArray.length; i++) {
        crrItem = inputArray[i]

        for (let j = 0; j < inputArray.length; j++) {
            innerCrrItem = inputArray[j]
            if (itemMap.has(getKeyByValue(itemMap, crrItem))) {
                key = getKeyByValue(itemMap, crrItem)
            } else {
                key = ALPHABET[0 + alphaOffset]
                alphaOffset++
            }
            itemMap.set(key, crrItem)
        }
    }
    return itemMap
}


/**
 * Generates a 3x3 matrix of a single letter
 * @param {Map} inputMap The input map from genItemMap @see genItemMap
 * @param {String[]} inputArray The array of items from the server.
 * @returns a legend-matrix for use in the final string
 */
function genItemMatrix(inputMap, inputArray) {
    let matrix = "";
    let counter = 0;
	var item;
    for (let i = 0; i < inputArray.length; i++) {
        item = inputArray[i]
        let key;

        key = getKeyByValue(inputMap, item)
		var comma;
		var keyAdd,
        comma = "";
        keyAdd = "";

        if ((counter == 2) || (counter == 5)) {
            comma = `,\n`
        }

        switch (counter % 3) {
            case 0:
                keyAdd = `'${key}`
                break;
            case 1:
                keyAdd = `${key}`
                break;
            case 2:
                keyAdd = `${key}'${comma}`
                break;
        }
        counter++
        matrix += keyAdd
    }
    return matrix
}


/**
 * Creates a legend for the shaped recipe.
 * @param {Map} map input map
 * @returns {String[]} array 
 */
function recipeLegend(map) {
    let array = new Array
    for (let [k, v] of map.entries()) {
        crrLegen = `${k}: ${v}`
        array.push(crrLegen)
    }
    return array
}



/**
 * @param {String} matrix The matrix input
 * @param {String} legend The key/value pair legend
 * @param {String} output output item
 * @returns A copyable string to slap back into KJS
 */
function genShapedRecipeString(matrix, legend, output) {
    return `event.shaped(${output}, [
        ${matrix}
      ], {
        ${legend}
      })`
}

/**
 * @param {String[]} array Array of items
 * @param {String} output output item
 * @returns A copyable string to slap back into KJS
 */
function genShapelessRecipeString(array, output) {
    template = `event.shapeless(${output}, [${array}])`
    return template.replace(/\n/g, "")
}

